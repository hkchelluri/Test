/// <reference types="node" />
/// <reference types="node" />
import type { Logger } from '@sap-ux/logger';
import type { BackendSystem } from '@sap-ux/store';
import type { AbapTarget, AdpPreviewConfig, UrlAbapTarget } from '../types';
import type { AbapServiceProvider } from '@sap-ux/axios-extension';
import type { ZipFile } from 'yazl';
type BasicAuth = Required<Pick<BackendSystem, 'username' | 'password'>>;
type ServiceAuth = Required<Pick<BackendSystem, 'serviceKeys' | 'name'>> & {
    refreshToken?: string;
};
/**
 * Create a buffer based on the given zip file object.
 *
 * @param zip object representing a zip file
 * @returns a buffer
 */
export declare function createBuffer(zip: ZipFile): Promise<Buffer>;
/**
 * Check the secure storage if it has credentials for the given target.
 *
 * @param target ABAP target
 * @returns credentials from the store or undefined.
 */
export declare function getCredentials<T extends BasicAuth | ServiceAuth | undefined>(target: UrlAbapTarget): Promise<T | undefined>;
/**
 * Check if it is a url or destination target.
 *
 * @param target target configuration
 * @returns true is it is a UrlAbapTarget
 */
export declare function isUrlTarget(target: AbapTarget): target is UrlAbapTarget;
/**
 * Create an instance of a UI5AbapRepository service connected to the given target configuration.
 *
 * @param config - deployment configuration
 * @param logger - optional reference to the logger instance
 * @returns service instance
 */
export declare function createProvider(config: AdpPreviewConfig, logger: Logger): Promise<AbapServiceProvider>;
export {};
//# sourceMappingURL=service.d.ts.map