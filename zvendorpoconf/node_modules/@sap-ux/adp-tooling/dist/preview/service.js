"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProvider = exports.isUrlTarget = exports.getCredentials = exports.createBuffer = void 0;
const store_1 = require("@sap-ux/store");
const btp_utils_1 = require("@sap-ux/btp-utils");
const axios_extension_1 = require("@sap-ux/axios-extension");
const prompt_1 = require("../base/prompt");
/**
 * Create a buffer based on the given zip file object.
 *
 * @param zip object representing a zip file
 * @returns a buffer
 */
function createBuffer(zip) {
    var _a, e_1, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        yield new Promise((resolve) => {
            zip.end({ forceZip64Format: false }, () => {
                resolve();
            });
        });
        const chunks = [];
        try {
            for (var _d = true, _e = __asyncValues(zip.outputStream), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    const chunk = _c;
                    chunks.push(chunk);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return Buffer.concat(chunks);
    });
}
exports.createBuffer = createBuffer;
/**
 * Check the secure storage if it has credentials for the given target.
 *
 * @param target ABAP target
 * @returns credentials from the store or undefined.
 */
function getCredentials(target) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(0, btp_utils_1.isAppStudio)()) {
            const systemService = yield (0, store_1.getService)({ entityName: 'system' });
            let system = yield systemService.read(new store_1.BackendSystemKey({ url: target.url, client: target.client }));
            if (!system && target.client) {
                // check if there are credentials for the default client
                system = yield systemService.read(new store_1.BackendSystemKey({ url: target.url }));
            }
            return system;
        }
        else {
            return undefined;
        }
    });
}
exports.getCredentials = getCredentials;
/**
 * Enhance axios options and create a service provider instance for an ABAP Cloud system.
 *
 * @param options - predefined axios options
 * @param target - url target configuration
 * @param logger - reference to the logger instance
 * @returns an abap service provider
 */
function createAbapCloudServiceProvider(options, target, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const providerConfig = Object.assign(Object.assign({}, options), { environment: axios_extension_1.AbapCloudEnvironment.Standalone });
        // first try reading the keys from the store
        const storedOpts = yield getCredentials(target);
        if (logger && storedOpts) {
            providerConfig.service = storedOpts.serviceKeys;
            providerConfig.refreshToken = storedOpts.refreshToken;
            logger.info(`Using system [${storedOpts.name}] from System store`);
        }
        // next prompt the user for the keys
        if (!storedOpts) {
            providerConfig.service = yield (0, prompt_1.promptServiceKeys)();
        }
        // if no keys are available throw and error
        if (providerConfig.service) {
            return (0, axios_extension_1.createForAbapOnCloud)(providerConfig);
        }
        else {
            throw new Error('Service keys required for deployment to an ABAP Cloud environment.');
        }
    });
}
/**
 * Enhance axios options and create a service provider instance for an on-premise ABAP system.
 *
 * @param options predefined axios options
 * @param target url target configuration
 * @param logger reference to the logger instance
 * @returns an ABAPServiceProvider instance
 */
function createAbapServiceProvider(options, target, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        options.baseURL = target.url;
        if (target.client) {
            options.params['sap-client'] = target.client;
        }
        if (!options.auth) {
            let storedOpts;
            try {
                storedOpts = yield getCredentials(target);
            }
            catch (error) {
                logger.debug('Could not read credentials from store.');
                // something went wrong but it doesn't matter, we just prompt the user
            }
            if ((storedOpts === null || storedOpts === void 0 ? void 0 : storedOpts.username) && (storedOpts === null || storedOpts === void 0 ? void 0 : storedOpts.password)) {
                options.auth = {
                    username: storedOpts.username,
                    password: storedOpts.password
                };
            }
            else {
                const credentials = yield (0, prompt_1.promptCredentials)(storedOpts === null || storedOpts === void 0 ? void 0 : storedOpts.username);
                options.auth = credentials;
                process.env.FIORI_TOOLS_USER = credentials.username;
                process.env.FIORI_TOOLS_PASSWORD = credentials.password;
            }
        }
        return (0, axios_extension_1.createForAbap)(options);
    });
}
/**
 * Check if it is a url or destination target.
 *
 * @param target target configuration
 * @returns true is it is a UrlAbapTarget
 */
function isUrlTarget(target) {
    return target.url !== undefined;
}
exports.isUrlTarget = isUrlTarget;
/**
 * Create an instance of a UI5AbapRepository service connected to the given target configuration.
 *
 * @param config - deployment configuration
 * @param logger - optional reference to the logger instance
 * @returns service instance
 */
function createProvider(config, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        let provider;
        const options = {
            params: {},
            ignoreCertErrors: config.ignoreCertErrors
        };
        // Destination only supported on Business Application studio
        if ((0, btp_utils_1.isAppStudio)() && config.target.destination) {
            // Need additional properties to determine the type of destination we are dealing with
            const destinations = yield (0, btp_utils_1.listDestinations)();
            const destination = destinations === null || destinations === void 0 ? void 0 : destinations[config.target.destination];
            if (!destination) {
                throw new Error(`Destination ${config.target.destination} not found on subaccount`);
            }
            provider = (0, axios_extension_1.createForDestination)(options, destination);
        }
        else if (isUrlTarget(config.target)) {
            if (config.target.scp) {
                provider = yield createAbapCloudServiceProvider(options, config.target, logger);
            }
            else {
                provider = yield createAbapServiceProvider(options, config.target, logger);
            }
        }
        else {
            throw new Error('Unable to handle the configuration in the current environment.');
        }
        return provider;
    });
}
exports.createProvider = createProvider;
//# sourceMappingURL=service.js.map